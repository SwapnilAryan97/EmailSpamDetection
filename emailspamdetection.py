# -*- coding: utf-8 -*-
"""EmailSpamDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hpe9myqMihis1tWi6CUNXaEzFpwZk_fo

Importing the libraries
"""

import pandas as pd
import numpy as np
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

"""Importing the dataset"""
url = 'https://raw.githubusercontent.com/SwapnilAryan97/EmailSpamDetection/master/emails.csv
dataset = pd.read_csv(url)
print(dataset)
row_size = dataset.shape[0]
print(row_size)

"""Cleaning the texts"""

corpus = []
for i in range (0, row_size):
    review = re.sub('[^a-zA-Z]', ' ', dataset['text'][i])
    review = review.lower()
    review = review.split()
    ps = PorterStemmer()
    all_stopwords = stopwords.words('english')
    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
    review = ' '.join(review)
    corpus.append(review)
print(corpus)

"""Creating Bag of Words"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = len(x[0]) )
x = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, -1].values

"""Splitting dataset into Training and Testing set"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

"""Kernel SVC"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'rbf')
classifier.fit(x_train, y_train)

"""Predicting Test Set result"""

y_pred = classifier.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))

"""Making Confusion Matrix & Accuracy Score"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
print('Accuracy is: {:.2f}%'.format(accuracy_score(y_test, y_pred)*100))

"""Applying k-Fold Cross Validation"""

from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 10)
print('Accuracy: {:.2f}%'.format(accuracies.mean()*100))

"""Grid Search to find best model and best parameter"""

from sklearn.model_selection import GridSearchCV
parameters = [{'C':[0.25, 0.5, 0.75, 1], 
              'kernel' : ['rbf'],
              'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]
grid_search = GridSearchCV(estimator = classifier,
                           param_grid = parameters,
                           scoring = 'accuracy',
                           cv = 10)
grid_search.fit(x_train, y_train)
best_accuracy = grid_search.best_score_
best_parameters = grid_search.best_params_
print("Best Accuracy: {:.2f} %".format(best_accuracy*100))
print("Best Parameters:", best_parameters)
